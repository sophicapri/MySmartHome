plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
    id 'jacoco'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.mysmarthome"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([debugTree]))
        executionData.setFrom(fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ]))
    }

    testOptions {
        unitTests.all {
            jacoco {
                excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
            testCoverageEnabled true
        }
    }
    hilt {
        enableExperimentalClasspathAggregation = true
    }

    android.lintOptions.checkReleaseBuilds = false

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildToolsVersion '31.0.0'

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    android.buildFeatures.viewBinding = true
}

dependencies {

    implementation "androidx.core:core-ktx:$coreVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentSupportVersion"
    implementation "androidx.activity:activity-ktx:$supportLibVersion"
    implementation "androidx.appcompat:appcompat:$supportLibVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"

    //Kotlin
    //implementation "org.jetbrains.kotlinx:kotlinx-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    // DataStore
    implementation "androidx.datastore:datastore-preferences:$dataStoreVersion"
    implementation "androidx.datastore:datastore-core:$dataStoreVersion"
    implementation "androidx.datastore:datastore-preferences-core:$dataStoreVersion"

    // RxJava
    implementation "io.reactivex.rxjava3:rxkotlin:$rxKotlinVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"

    // Gson
    implementation "com.google.code.gson:gson:$gsonVersion"


    // Retrofit
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hiltAndroidXVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"

    // Room
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"


    // TESTING
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"

    androidTestImplementation 'androidx.test:runner:1.4.0'

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$coreTestingVersion"

        // MockK
    androidTestImplementation 'io.mockk:mockk-android:1.12.0'
    testImplementation 'io.mockk:mockk:1.12.0'


   /* implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"*/

}